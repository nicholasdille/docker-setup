#syntax=docker/dockerfile:1.6.0

ARG ref=main

#FROM ghcr.io/nicholasdille/docker-setup/go:${ref} AS go
#FROM ghcr.io/nicholasdille/docker-setup/rust:${ref} AS rust
#FROM ghcr.io/nicholasdille/docker-setup/python:${ref} AS python
#FROM ghcr.io/nicholasdille/docker-setup/shiv:${ref} AS shiv
#FROM ghcr.io/nicholasdille/docker-setup/nodejs:${ref} AS nodejs
#FROM ghcr.io/nicholasdille/docker-setup/npm:${ref} AS npm

FROM ghcr.io/nicholasdille/docker-setup/base:${ref} AS prepare
ARG name
ARG version

# check
# check-github-release-asset "foo/bar" "${version}" "foo-${version}-linux-amd64.tar.gz"

# tarball
#RUN <<EOF
#curl --silent --location --fail "" \
#| tar --extract --gzip --directory="${prefix}${target}/bin/" --no-same-owner
#EOF

# executable
#RUN <<EOF
#curl --silent --location --fail --output "${prefix}${target}/bin/foo" \
#    ""
#chmod +x "${prefix}${target}/bin/foo"
#EOF

# zip
#RUN <<EOF
#url=""
#filename="$(basename "${url}")"
#curl --silent --location --fail --remote-name "${url}"
#unzip -q -o -d "${prefix}${target}/bin" "${filename}"
#EOF

# go
#COPY --link --from=go / /
#RUN <<EOF
#apt-get update
#apt-get -y install --no-install-recommends \
#    make
#EOF
#WORKDIR /go/src/github.com/foo/bar
#RUN <<EOF
#git clone -q --config advice.detachedHead=false --depth 1 --branch "v${version}" https://github.com/foo/bar .
#make
#cp foo "${prefix}${target}/bin/"
#EOF

# rust
#COPY --from=rust / /
#ARG DEBIAN_FRONTEND=noninteractive
#RUN <<EOF
#apt-get update
#apt-get -y install --no-install-recommends \
#    build-essential
#EOF
#WORKDIR /tmp/github.com/foo/bar
#SHELL [ "/bin/bash", "--login", "-ec" ]
#RUN <<EOF
#git clone -q --config advice.detachedHead=false --depth 1 --branch "${version}" https://github.com/foo/bar .
#export RUSTFLAGS='-C target-feature=+crt-static'
#cargo build --release --target "${arch}-unknown-linux-gnu"
#cp "target/${arch}-unknown-linux-gnu/release/foo" "${prefix}${target}/bin/"
#EOF

# python
#COPY --link --from=python / /
#COPY --link --from=shiv / /
#RUN <<EOF
#shiv --output-file "${prefix}${target}/bin/foo" --console-script foo "foo==${version}"
#EOF

# node
#COPY --link --from=nodejs / /
#COPY --link --from=npm / /
#WORKDIR ${prefix}${target}/libexec/foo
#ARG name
#ARG version
#RUN <<EOF
#npm install \
#    --omit=dev \
#    "foo@${version}"
#ln --symbolic --relative --force "${prefix}${target}/libexec/foo/node_modules/.bin/foo" "${prefix}${target}/bin/"
#EOF

# c
#RUN <<EOF
#apt-get update
#apt-get -y install --no-install-recommends \
#    autogen \
#    autoconf \
#    automake \
#    libtool \
#    build-essential
#EOF
#WORKDIR /tmp/foo
#RUN <<EOF
##git clone -q --config advice.detachedHead=false --depth 1 --branch "${version}" https://github.com/foo/bar .
#./configure --prefix="${prefix}${target}"
#make LDFLAGS=-static
#make install
#rm -f "${prefix}${target}/man"
#EOF

# foo
#RUN <<EOF
#touch "${prefix}${target}/foo"
#EOF

# completion
#RUN <<EOF
#"${prefix}${target}/bin/foo" completion bash >"${prefix}${target}/share/bash-completion/completions/foo"
#"${prefix}${target}/bin/foo" completion fish >"${prefix}${target}/share/fish/vendor_completions.d/foo.fish"
#"${prefix}${target}/bin/foo" completion zsh >"${prefix}${target}/share/zsh/vendor-completions/_foo"
#EOF