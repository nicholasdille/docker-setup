name: Test-Linux

on:
  push:
    tags:
      - "v*"
  pull_request:
    types:
      - opened
      - synchronize
      - labeled
      - reopened
    paths:
      - docker-setup.sh
      - env/**
      - Dockerfile
      - docker/*
      - .github/workflows/test-linux.yml

jobs:

  check:
    name: Checks
    runs-on: ubuntu-20.04
    outputs:
      has_release: ${{ steps.check.outputs.has_release }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Check release
        id: check
        run: |
          has_release=false

          tags="$(git tag --points-at HEAD)"
          echo "Got tags: ${tags}."
          if test "$(echo "${tags}" | wc -l)" -gt 0; then

              for tag in ${tags}; do
                  echo "Checking tag ${tag} for release"
                  if curl -sfo /dev/null "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${tag}"; then
                      echo "Found release for current commit/tag, can skip tests"
                      has_release=true
                      break
                  fi
              done
          fi

          echo "::set-output name=has_release::${has_release}"

  test:
    name: Tests
    needs:
    - check
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        distro:
          - alpine-3.15
          #- amazonlinux-2
          #- archlinux
          #- clearlinux
          #- centos-7
          #- centos-8
          - debian-11
          - fedora-35
          #- opensuse-leap-15
          #- opensuse-tumbleweed
          #- rockylinux-8
          - ubuntu-20.04
          - ubuntu-21.04
          - ubuntu-22.04
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test
        if: needs.check.outputs.has_release != 'true'
        env:
          DOCKER_BUILDKIT: 1
          TERM: xterm
          SKIP_DOCS: ${{ github.event_name == 'pull_request' }}
        run: |
          docker build --tag test --file env/${{ matrix.distro }}/Dockerfile .; \
          mkdir -p "${PWD}/log"; \
          docker run \
              --interactive \
              --rm \
              --privileged \
              --env TERM \
              --env Europe/Berlin \
              --env SKIP_DOCS \
              --volume "${PWD}/log:/var/log" \
              test bash run.sh

      - name: Store logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: logs-${{ matrix.distro }}.zip
          path: log/**
