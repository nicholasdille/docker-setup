#!/bin/bash
set -o errexit

: "${docker_setup_version:=main}"
: "${tools_version:=main}"

if test -t 1; then
    cat <<"EOF"
     _            _                           _
  __| | ___   ___| | _____ _ __      ___  ___| |_ _   _ _ __
 / _` |/ _ \ / __| |/ / _ \ '__|____/ __|/ _ \ __| | | | '_ \
| (_| | (_) | (__|   <  __/ | |_____\__ \  __/ |_| |_| | |_) |
 \__,_|\___/ \___|_|\_\___|_|       |___/\___|\__|\__,_| .__/
                                                       |_|
                     The container tools installer and updater
                 https://github.com/nicholasdille/docker-setup
--------------------------------------------------------------
This script will install Docker Engine as well as useful tools
from the container ecosystem.

EOF
fi

: "${debug:=false}"
function debug() {
    if ${debug}; then
        >&2 echo -e "${magenta}[DEBUG] $*${reset}"
    fi
}
if echo "$@" | grep -q "^--debug$"; then
    debug=true
fi

: "${trace:=false}"
function trace() {
    if ${trace}; then
        >&2 echo -e "${grey}[TRACE] $*${reset}"
    fi
}
if echo "$@" | grep -q "^--trace$"; then
    debug=true
    trace=true
fi

: "${profile:=false}"
SECONDS=0
function profile() {
    if ${profile}; then
        >&2 echo -e "${yellow}[PROFILE] $* @ ${SECONDS} seconds${reset}"
    fi
}
if echo "$@" | grep -q "^--profile$"; then
    profile=true
fi

reset="\e[39m\e[49m"
green="\e[92m"
yellow="\e[93m"
red="\e[91m"
grey="\e[90m"
magenta="\e[95m"

# https://unicode.org/emoji/charts-14.0/full-emoji-list.html
# shellcheck disable=SC2034
emoji_tool="$(echo -e "\U0001F528")"
# shellcheck disable=SC2034
emoji_auth="$(echo -e "\U0001F513")"
# shellcheck disable=SC2034
emoji_whale="$(echo -e "\U0001F433")"
# shellcheck disable=SC2034
emoji_container=$(echo -e "\U0001F5C3")
# shellcheck disable=SC2034
emoji_image="$(echo -e "\U0001F4E6")"
# shellcheck disable=SC2034
emoji_layer="$(echo -e "\U0001F4C2")"
# shellcheck disable=SC2034
emoji_archive="$(echo -e "\U0001F4E5")"
# shellcheck disable=SC2034
emoji_sign="$(echo -e "\U00002712")"
# shellcheck disable=SC2034
emoji_push="$(echo -e "\U0001F4E4")"
# shellcheck disable=SC2034
emoji_pull="$(echo -e "\U0001F4E5")"
# shellcheck disable=SC2034
emoji_build="$(echo -e "\U0001F9F1")"
# shellcheck disable=SC2034
emoji_inspect="$(echo -e "\U0001F50D")"
# shellcheck disable=SC2034
emoji_done="$(echo -e "\u2713")"
# shellcheck disable=SC2034
emoji_todo="$(echo -e "\u21bb")"
# shellcheck disable=SC2034
emoji_missing="$(echo -e "\u2717")"

: "${REGISTRY:=ghcr.io}"
: "${REPOSITORY_PREFIX:=nicholasdille/docker-setup/}"

: "${docker_setup_cache:=/var/cache/docker-setup}"
if ! test -w "${docker_setup_cache}"; then
    debug "WARNING: Cache directory <${docker_setup_cache}> is not writable."
    docker_setup_cache="${HOME}/.cache/docker-setup"
    debug "WARNING: Using cache directory <${docker_setup_cache}>"
fi
mkdir -p "${docker_setup_cache}"

export PATH="${docker_setup_cache}/bin:${PATH}"
REGCLIENT_VERSION=0.4.5
if ! type regctl >/dev/null 2>&1 || test "$(regctl version | jq -r .VCSTag | tr -d v)" != "${REGCLIENT_VERSION}"; then
    debug "Installing regctl"
    mkdir -p "${docker_setup_cache}/bin"
    curl --silent --location --output "${docker_setup_cache}/bin/regctl" \
        "https://github.com/regclient/regclient/releases/download/v${REGCLIENT_VERSION}/regctl-linux-amd64"
    chmod +x "${docker_setup_cache}/bin/regctl"
fi
YQ_VERSION=4.28.2
if ! type yq >/dev/null 2>&1 || test "$(yq --version | cut -d' ' -f4)" != "${YQ_VERSION}"; then
    debug "Installing yq"
    mkdir -p "${docker_setup_cache}/bin"
    curl --silent --location --output "${docker_setup_cache}/bin/yq" \
        "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64"
    chmod +x "${docker_setup_cache}/bin/yq"
fi
JQ_VERSION=1.6
if ! type jq >/dev/null 2>&1 || test "$(jq --version | cut -d- -f2)" != "${JQ_VERSION}"; then
    debug "Installing jq"
    mkdir -p "${docker_setup_cache}/bin"
    curl --silent --location --output "${docker_setup_cache}/bin/yq" \
        "https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64"
    chmod +x "${docker_setup_cache}/bin/jq"
fi

if test -z "${DOCKER_CONFIG}"; then
    export DOCKER_CONFIG="${HOME}/.docker"
fi

function update() {
    regctl manifest get "${REGISTRY}/${REPOSITORY_PREFIX}metadata:${tools_version}" --format raw-body | jq --raw-output '.layers[].digest' \
    | while read -r DIGEST; do
        regctl blob get "${REGISTRY}/${REPOSITORY_PREFIX}metadata:${tools_version}" "${DIGEST}" \
        | tar --extract --gzip --directory="${docker_setup_cache}" --no-same-owner
    done
}

docker_setup_metadata_file="${docker_setup_cache}/metadata.json"
if test -f "${PWD}/metadata.json"; then
    docker_setup_metadata_file="${PWD}/metadata.json"
else
    if ! test -f "${docker_setup_metadata_file}"; then
        update
    fi
fi
debug "Using ${docker_setup_metadata_file}"

declare -A tool_json
mapfile tool_json_array < <(jq --raw-output --compact-output '.tools[] | "\(.name)=\(.)"' "${docker_setup_metadata_file}")
i=0
while test "$i" -lt "${#tool_json_array[@]}"; do
    name_json=${tool_json_array[$i]}

    name="${name_json%%=*}"
    json="${name_json#*=}"
    tool_json[${name}]="${json}"

    i=$((i + 1))
done

docker_setup_dockerfile_template="${docker_setup_cache}/Dockerfile.template"
if test -f "${PWD}/tools/Dockerfile.template"; then
    docker_setup_dockerfile_template="${PWD}/tools/Dockerfile.template"
else
    curl --silent --location --output "${docker_setup_dockerfile_template}" \
        https://raw.githubusercontent.com/nicholasdille/docker-setup/${tools_version}/tools/Dockerfile.template
fi
debug "Using ${docker_setup_dockerfile_template}"

all_tools="$(
    jq --raw-output '.tools[] | .name' "${docker_setup_metadata_file}" \
    | sort \
    | xargs
)"
default_tools="$(
    jq --raw-output '.tools[] | select(.tags[] | contains("category/default")) | .name' "${docker_setup_metadata_file}" \
    | xargs
)"
selected_tools="${default_tools}"
install_tools=""
declare -A tool_version
declare -A tool_binary
declare -A tool_check
declare -A tool_deps
declare -A tool_marker_file_present
declare -A tool_installed_version
declare -A tool_version_matches
declare -A tool_installed
declare -A tool_operator
declare -A tool_color
declare -A tool_marker

function resolve_dependencies() {
    local name=$1
    shift
    local state="$*"

    trace "resolve_dependencies(${name}): state=${state}."

    if echo "${state}" | tr ' ' '\n' | grep -q "^${name}$"; then
        trace "resolve_dependencies(${name}): Already present"
        echo "${state}"
        return
    fi

    local deps
    deps="${tool_deps[${name}]}"
    trace "resolve_dependencies(${name}): deps=${deps}."
    
    local dep
    for dep in ${deps}; do
        trace "resolve_dependencies(${name}): calling self for ${dep} with state=${state}."
        state="$(resolve_dependencies "${dep}" "${state}")"
        trace "resolve_dependencies(${name}): returned for ${dep} with state=${state}."
    done

    echo "${state} ${name}" | xargs
}

function resolve_dependencies_wrapper() {
    state=""
    for name in ${selected_tools}; do
        state="$(resolve_dependencies "${name}" "${state}")"
    done
    echo "${state}"
}

function generate() {
    # shellcheck disable=SC2002
    CONTENT="$(
        cat "${docker_setup_dockerfile_template}" \
        | sed -E "s|^ARG ref=main|ARG ref=${tools_version}|"
    )"
    while test "$#" -gt 0; do
        tool=$1
        shift

        CONTENT="$(
            echo "${CONTENT}" \
            | sed -E "s|^(# INSERT FROM)|FROM ${REGISTRY}/${REPOSITORY_PREFIX}${tool}:\${ref} AS ${tool}\n\1|" \
            | sed -E "s|^(# INSERT COPY)|COPY --link --from=${tool} / /\n\1|"
        )"
    done
    echo "${CONTENT}"
}

function warm_cache() {
    local temp

    profile "Starting cache warming"
    
    temp="$(jq --raw-output '.tools[] | "\(.name)=\(select(.version != null) | .version)"' "${docker_setup_metadata_file}")"
    for pair in ${temp}; do
        local name="${pair%%=*}"
        local value="${pair#*=}"
        trace "VERSION name=${name},value=${value}."
        tool_version[${name}]=${value}
    done

    profile "Done reading versions"

    temp="$(jq --raw-output '.tools[] | "\(.name)=\(select(.binary != null) | .binary)"' "${docker_setup_metadata_file}")"
    for pair in ${temp}; do
        local name="${pair%%=*}"
        local value="${pair#*=}"
        trace "BINARY name=${name},value=${value}."
        tool_binary[${name}]=${value}
    done

    profile "Done reading binaries"

    temp="$(jq --raw-output '.tools[] | "\(.name)=\(select(.dependencies != null) | .dependencies | join(" "))"' "${docker_setup_metadata_file}")"
    for pair in ${temp}; do
        local name="${pair%%=*}"
        local value="${pair#*=}"
        if test "${value}" != "${name}"; then
            trace "DEP name=${name},value=${value}."
            tool_deps[${name}]="${value}"
        fi
    done

    profile "Done reading dependencies"

    if ! ${deps}; then
        install_tools="$(resolve_dependencies_wrapper)"
    else
        install_tools="${selected_tools}"
    fi

    profile "Done resolving dependencies"

    for name in ${install_tools}; do
        debug "${name}:"

        local version="${tool_version[${name}]}"
        debug "  version=${version}."

        if test -f "${docker_setup_cache}/${name}/${version}"; then
            debug "  ${green}MARKER_FILE_EXISTS${reset}"
            tool_marker_file_present[${name}]=true
        else
            debug "  ${red}MARKER_FILE_MISSING${reset}"
            tool_marker_file_present[${name}]=false
        fi

        local binary="${tool_binary[${name}]}"
        if test "${binary}" == "false"; then
            debug "  ${red}NO_BINARY_DEFINED${reset}"

            if ${tool_marker_file_present[${name}]}; then
                debug "  Setting green"
                tool_installed[${name}]=true
                tool_operator[${name}]="="
                tool_color[${name}]="${green}"
                tool_marker[${name}]="${emoji_done}"
            
            else
                debug "  Setting red"
                tool_installed[${name}]=false
                tool_operator[${name}]="!"
                tool_color[${name}]="${red}"
                tool_marker[${name}]="${emoji_missing}"
            fi
            continue

        else
            if test -z "${binary}"; then
                binary="${name}"
            fi
            # shellcheck disable=SC2001
            binary="$(
                echo "${binary}" \
                | sed "s|\${target}|${target}|g"
            )"
            if test "${binary:0:1}" != "/"; then
                binary="${target}/bin/${binary}"
            fi
            tool_binary[${name}]="${binary}"
        fi
        debug "  binary=${binary}."

        if test -z "${tool_check[${name}]}"; then
            tool_check[${name}]="$(jq --raw-output --arg name "${name}" 'select(.check != null and .check != "") | .check' <<<"${tool_json[${name}]}")"
        fi
        if test -n "${tool_check[${name}]}"; then
            local check="${tool_check[${name}]}"
            debug "  check=${check//\$\{binary\}/${binary}}."
        fi

        if test -n "${tool_check[${name}]}"; then
            debug "  ${green}CHECK_EXISTS${reset}"
            tool_installed[${name}]=false
            tool_version_matches[${name}]=false

            if test -f "${binary}"; then
                debug "  ${green}BINARY_EXISTS${reset}"
            fi

            if test -x "${binary}"; then
                debug "  ${green}BINARY_EXECUTABLE${reset}"
                installed_version="$(eval "${tool_check[${name}]}")"
                tool_installed_version[${name}]="${installed_version}"
                debug "  installed_version=${installed_version}."

                if test "${installed_version}" == "${version}"; then
                    tool_installed[${name}]=true
                    tool_version_matches[${name}]=true
                    debug "  ${green}VERSION_MATCHES${reset}"

                else
                    tool_installed[${name}]=true
                    tool_version_matches[${name}]=false
                    debug "  ${red}VERSION_MISMATCH${reset}"
                fi
            fi

        elif ${tool_marker_file_present[${name}]}; then
            debug "  ${red}No check defined${reset}"
            tool_installed[${name}]=true
        fi

        if ${tool_installed[${name}]}; then
            if ${tool_version_matches[${name}]}; then
                debug "  Setting green"
                tool_operator[${name}]="="
                tool_color[${name}]="${green}"
                tool_marker[${name}]="${emoji_done}"

            else
                debug "  Setting yellow"
                tool_operator[${name}]="<"
                tool_color[${name}]="${yellow}"
                tool_marker[${name}]="${emoji_todo}"
            fi

        else
            debug "  Setting red"
            tool_operator[${name}]="!"
            tool_color[${name}]="${red}"
            tool_marker[${name}]="${emoji_missing}"
        fi

        profile "Done with ${name}"
    done

    profile "Done warming cache"
}

function show_help() {
    cat <<EOF
docker-setup

Commands:
  update                  Update tools manifests
  upgrade                 Update docker-setup
  ls, list, l             List available tools
  info                    Show tool manifest
  tags, t                 Show tags
  dependencies, deps, d   Resolve dependencies
  inspect                 Show contents image
  search, find            Search for tools
  generate, gen, g        Generate Dockerfile
  build, b                Build container image
  build-flat              Build container image using "docker commit"
  install                 Install natively
  install-from-registry   Install 
  install-from-image      Build container image with local output

Global options:
  --help                  Display help
  --debug                 Display debug output
  --trace                 Display trace output
  --profile               Display timing information
  --version               Display version
EOF
}

target=/usr/local
: "${deps:=false}"
: "${reinstall:=false}"
while test "$#" -gt 0; do
    case "$1" in
        --version)
            echo "docker-setup version ${docker_setup_version}"
            ;;

        --debug)
            debug=true
            ;;

        --trace)
            debug=true
            trace=true
            ;;

        --profile)
            profile=true
            ;;

        --help)
            show_help
            ;;
        
        --prefix|--prefix=*)
            if test "$1" == "--prefix"; then
                shift
                prefix="$1"
            else
                prefix="${1#*=}"
            fi
            ;;

        --tools|--tools=*)
            if test "$1" == "--tools"; then
                shift
                tools=$1
            else
                tools="${1#*=}"
            fi
            case "${tools}" in
                all)
                    debug "Selected all tools"
                    selected_tools="${all_tools}"
                    ;;
                default)
                    debug "Selected default tools"
                    selected_tools="${default_tools}"
                    ;;
                installed)
                    >&2 echo "NOT IMPLEMENTED YET"
                    exit 1
                    ;;
                *)
                    selected_tools="$(echo "${tools}" | tr ',' ' ')"
                    debug "Selected custom list of tools: ${selected_tools}"
                    ;;
            esac
            ;;

        --tags|--tags=*)
            if test "$1" == "--tags"; then
                shift
                tags=$1
            else
                tags="${1#*=}"
            fi
            selected_tools="$(
                jq --raw-output --arg category "${tags}" '.tools[] | select(.tags[] | inside($category)) | .name' "${docker_setup_metadata_file}" \
                | xargs
            )"
            install_tools="$(resolve_dependencies_wrapper)"
            warm_cache
            ;;

        --all)
            shift
            set -- --all --tools=all "$@"
            ;;

        --default)
            shift
            set -- --default --tools=default "$@"
            ;;

        --installed)
            shift
            set -- --installed --tools=installed "$@"
            ;;

        --deps)
            deps=true
            ;;

        --no-deps)
            deps=false
            ;;

        --reinstall)
            reinstall=true
            ;;

        update)
            update
            ;;

        upgrade)
            echo "Replacing $0"
            touch /
            exec curl --silent --location -o "$0" https://github.com/nicholasdille/docker-setup/raw/main/docker-setup
            ;;

        debug)
            warm_cache
            echo "prefix=${prefix}"
            echo "target=${target}"
            echo "selected_tools=${selected_tools}"
            echo "install_tools=${install_tools}."
            ;;
            
        ls|list|l)
            jq --raw-output '.tools[] | "\(.name);\(.version);\(.description)"' "${docker_setup_metadata_file}" \
            | while read -r LINE; do
                    for name in ${install_tools}; do
                        if grep -q "^${name};" <<<"${LINE}"; then
                            echo "${LINE}"
                        fi
                    done
                done \
            | column --separator ';' --table --table-columns Name,Version,Description --table-truncate 3
            ;;

        info)
            warm_cache
            for name in ${install_tools}; do
                echo "---"
                yq --prettyPrint <<<"${tool_json[${name}]}"
            done
            echo
            ;;

        tags|t)
            jq -r '.tools[].tags[]' "${docker_setup_metadata_file}" | sort | uniq | xargs echo
            ;;

        plan|p|status|s)
            warm_cache
            echo
            for name in ${install_tools}; do
                tool_version_string="${tool_operator[${name}]}${tool_version[${name}]}"
                if test -n "${tool_installed_version[${name}]}" && test "${tool_installed_version[${name}]}" != "${tool_version[${name}]}"; then
                    tool_version_string="-${tool_installed_version[${name}]}${tool_version_string}"
                fi
                echo -n -e "${tool_marker[${name}]}${tool_color[${name}]}${name}${reset}${tool_version_string}${reset}  "
            done
            echo
            ;;

        dependencies|deps|d)
            warm_cache
            echo "${install_tools}"
            ;;

        inspect)
            warm_cache
            for tool in ${install_tools}; do
                echo "${emoji_tool} Processing ${tool}"
                regctl manifest get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}" --format raw-body | jq --raw-output '.layers[].digest' \
                | while read -r DIGEST; do
                    echo "${emoji_archive} Inspecting ${DIGEST}"
                    regctl blob get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}" "${DIGEST}" \
                    | tar --list --gzip \
                    | grep -v "/$"
                done
            done
            ;;

        search|find)
            shift
            term=$1
            jq --raw-output --arg term "${term,,}" '.tools[] | select((.name | ascii_downcase | contains($term)) or (.description | ascii_downcase | contains($term)) or (.tags[] | ascii_downcase | contains($term)) or ((.dependencies != null) and (.dependencies[] | ascii_downcase | contains($term)))) | "\(.name);\(.version);\(.description)"' "${docker_setup_metadata_file}" \
            | sort \
            | uniq \
            | column --separator ';' --table --table-columns Name,Version,Description --table-truncate 3
            ;;

        generate|gen|g)
            warm_cache
            # shellcheck disable=SC2086
            generate ${install_tools}
            ;;

        build|b)
            shift
            image=$1
            if test -z "${image}"; then
                echo "No image name specified"
                exit 1
            fi
            warm_cache
            echo "Building image ${image} with $# tool(s)..."
            # shellcheck disable=SC2086
            generate ${install_tools} \
            | docker build --tag "${image}" -
            ;;

        install|i)
            echo
            if test -n "${prefix}"; then
                debug "Using prefix ${prefix}"
                mkdir -p "${prefix}"
            fi
            warm_cache
            for tool in ${install_tools}; do
                if ! ${reinstall} && ${tool_installed[${tool}]} && ${tool_version_matches[${tool}]}; then
                    echo -e "${green}${emoji_done}${reset} Nothing to do for ${tool} ${tool_version[${name}]}"
                    continue
                fi
                version="$(jq --raw-output --arg name "${tool}" 'select(.version != null) | .version' <<<"${tool_json[${tool}]}")"
                echo "${emoji_tool} Installing ${tool} ${version}"
                regctl manifest get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}" --format raw-body | jq --raw-output '.layers[].digest' \
                | while read -r DIGEST; do
                    #echo "${emoji_archive} Unpacking ${DIGEST}"
                    regctl blob get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}" "${DIGEST}" \
                    | tar --extract --gzip --directory="${prefix}" --no-same-owner
                done
                mkdir -p "${docker_setup_cache}/${tool}"
                touch "${docker_setup_cache}/${tool}/${version}"
            done
            if test -d /var/lib/docker-setup/post_install; then
                mkdir -p /var/lib/docker-setup "${docker_setup_cache}"
                export prefix="${prefix}"
                export target
                export docker_setup_cache
                export docker_setup_contrib=/var/lib/docker-setup/contrib
                export docker_setup_manifests=/var/lib/docker-setup/manifests
                FILES="$(find /var/lib/docker-setup/post_install -type f -name \*.sh)"
                for FILE in ${FILES}; do
                    echo "Running post install for $(basename "${FILE}" .sh)"
                    if ! bash "${FILE}" >"${FILE}.log" 2>&1; then
                        cat "${FILE}.log"
                    else
                        rm "${FILE}"
                    fi
                done
            fi
            ;;

        install-from-registry)
            if ! type docker >/dev/null 2>&1; then
                echo "ERROR: Command <install> requires docker."
                exit 1
            fi
            shift
            debug "Using prefix ${prefix} and target ${target}"
            if test -n "${prefix}"; then
                mkdir -p "${prefix}"
            fi
            warm_cache
            # shellcheck disable=SC2086
            generate ${install_tools} \
            | docker build --output "${prefix}${target}" -
            # TODO: post_install
            ;;

        install-from-image)
            if ! type docker >/dev/null 2>&1; then
                echo "ERROR: Command <install> requires docker."
                exit 1
            fi
            shift
            debug "Using prefix ${prefix} and target ${target}"
            if test -n "${prefix}"; then
                mkdir -p "${prefix}"
            fi
            warm_cache
            for tool in ${install_tools}; do
                echo "${emoji_tool} Processing ${tool}"
                echo "${emoji_image} Pulling image ${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}"
                docker image pull --quiet "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}"
                echo "${emoji_layer} Reading layers"
                docker image save "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}" \
                | tar --extract --to-stdout manifest.json \
                | jq --raw-output '.[].Layers[]' \
                | while read -r FILE; do
                    echo "${emoji_archive} Extracting layer $(dirname "${FILE}")"
                    docker image save "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}" \
                    | tar --extract --to-stdout "${FILE}" \
                    | tar --extract --directory="${prefix}${target}" --strip-components=2
                done
                echo "+ Done"
            done
            # TODO: post_install
            ;;
        
        build-flat)
            if ! type docker >/dev/null 2>&1; then
                echo "ERROR: Command <install> requires docker."
                exit 1
            fi
            shift
            base=$1
            if test -z "${base}"; then
                echo "No base image name specified"
                exit 1
            fi
            shift
            image=$1
            if test -z "${image}"; then
                echo "No image name specified"
                exit 1
            fi
            warm_cache
            docker create --name docker-setup-install-flat "${base}"
            for tool in ${install_tools}; do
                echo "${emoji_tool} Processing ${tool}"
                regctl manifest get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}" --format raw-body | jq --raw-output '.layers[].digest' \
                | while read -r DIGEST; do
                    echo "${emoji_archive} Unpacking ${DIGEST}"
                    regctl blob get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${tools_version}" "${DIGEST}" \
                    | gunzip \
                    | docker cp - docker-setup-install-flat:/
                done
            done
            # TODO: post_install
            echo "${emoji_whale} Creating image ${image}"
            docker commit docker-setup-install-flat "${image}"
            docker rm docker-setup-install-flat >/dev/null 2>&1
            ;;

        install-from-image-build)
            if ! type docker >/dev/null 2>&1; then
                echo "ERROR: Command <install> requires docker."
                exit 1
            fi
            shift
            debug "Using prefix ${prefix} and target ${target}"
            mkdir -p "${prefix}"
            if ! test -d "${docker_setup_cache}/repo/.git"; then
                git clone https://github.com/nicholasdille/docker-setup "${docker_setup_cache}/repo"
            else
                git -C "${docker_setup_cache}/repo" reset --hard
                git -C "${docker_setup_cache}/repo" pull
            fi
            warm_cache
            for name in ${install_tools}; do
                echo "${emoji_tool} Processing ${name}"
                make -C "${docker_setup_cache}/repo" tools/${name}/Dockerfile tools/${name}/manifest.json
                version="$(jq --raw-output --arg name "${name}" 'select(.version != null) | .version' <<<"${tool_json[${name}]}")"
                docker build "${docker_setup_cache}/repo/tools/${name}" \
                    --build-arg branch=${tools_version} \
                    --build-arg ref=${tools_version} \
                    --build-arg name=${name} \
                    --build-arg version=${version} \
                    --build-arg deps=${deps} \
                    --build-arg tags=${tags} \
                    --output type=local,dest=${prefix}${target}
            done
            # TODO: post_install
            ;;

        *)
            echo "ERROR: Unknown or empty command <$1>"
            show_help
            exit 1
            ;;
    esac

    shift
done